

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_45213784224458556989302273697721458755947352802729170735021659544389617065743699487407481946193893681973447268710838523708023111230234362955902000768282322845596195625562257172194101234317031044130370737585840986417388612454936969850362545760939217024933618132817830690159026260197920184029673875954950534606 = Integer(45213784224458556989302273697721458755947352802729170735021659544389617065743699487407481946193893681973447268710838523708023111230234362955902000768282322845596195625562257172194101234317031044130370737585840986417388612454936969850362545760939217024933618132817830690159026260197920184029673875954950534606); _sage_const_119013667572167009136191086616452146837590194600725458508857024260026174572184862727097334515725958630744619201036719834301104491895795470231427534373902478933045450801372035480701591551197573004846537698078057260460279196411048217290177559346249689629950908278761509084087907309232611314102477305479419906711 = Integer(119013667572167009136191086616452146837590194600725458508857024260026174572184862727097334515725958630744619201036719834301104491895795470231427534373902478933045450801372035480701591551197573004846537698078057260460279196411048217290177559346249689629950908278761509084087907309232611314102477305479419906711); _sage_const_119013667572167009136191086616452146837590194600725458508857024260026174572184862727097334515725958630744619201036719834301104491895795470231427534368474996956302792785364036251700725513111826566076427923651354636497529544228768655331954316379458744264158671575241100482663130084854369965292738774417071426347 = Integer(119013667572167009136191086616452146837590194600725458508857024260026174572184862727097334515725958630744619201036719834301104491895795470231427534368474996956302792785364036251700725513111826566076427923651354636497529544228768655331954316379458744264158671575241100482663130084854369965292738774417071426347); _sage_const_2 = Integer(2); _sage_const_20 = Integer(20); _sage_const_512 = Integer(512); _sage_const_5 = Integer(5)
import itertools

def small_roots(f, bounds, m=_sage_const_1 , d=None):
	if not d:
		d = f.degree()

	if isinstance(f, Polynomial):
		x, = polygens(f.base_ring(), f.variable_name(), _sage_const_1 )
		f = f(x)

	R = f.base_ring()
	N = R.cardinality()
	
	f /= f.coefficients().pop(_sage_const_0 )
	f = f.change_ring(ZZ)

	G = Sequence([], f.parent())
	for i in range(m+_sage_const_1 ):
		base = N**(m-i) * f**i
		for shifts in itertools.product(range(d), repeat=f.nvariables()):
			g = base * prod(map(power, f.variables(), shifts))
			G.append(g)

	B, monomials = G.coefficient_matrix()
	monomials = vector(monomials)

	factors = [monomial(*bounds) for monomial in monomials]
	for i, factor in enumerate(factors):
		B.rescale_col(i, factor)

	B = B.dense_matrix().LLL()

	B = B.change_ring(QQ)
	for i, factor in enumerate(factors):
		B.rescale_col(i, _sage_const_1 /factor)

	H = Sequence([], f.parent().change_ring(QQ))
	for h in filter(None, B*monomials):
		H.append(h)
		I = H.ideal()
		if I.dimension() == -_sage_const_1 :
			H.pop()
		elif I.dimension() == _sage_const_0 :
			roots = []
			for root in I.variety(ring=ZZ):
				root = tuple(R(root[var]) for var in f.variables())
				roots.append(root)
			return roots

	return []


c = _sage_const_45213784224458556989302273697721458755947352802729170735021659544389617065743699487407481946193893681973447268710838523708023111230234362955902000768282322845596195625562257172194101234317031044130370737585840986417388612454936969850362545760939217024933618132817830690159026260197920184029673875954950534606 

n = _sage_const_119013667572167009136191086616452146837590194600725458508857024260026174572184862727097334515725958630744619201036719834301104491895795470231427534373902478933045450801372035480701591551197573004846537698078057260460279196411048217290177559346249689629950908278761509084087907309232611314102477305479419906711 

leak = _sage_const_119013667572167009136191086616452146837590194600725458508857024260026174572184862727097334515725958630744619201036719834301104491895795470231427534368474996956302792785364036251700725513111826566076427923651354636497529544228768655331954316379458744264158671575241100482663130084854369965292738774417071426347 

P = PolynomialRing(Zmod(n), names=('x', 'y', 'z',)); (x, y, z,) = P._first_ngens(3)


f = (x-_sage_const_1 )**_sage_const_2  - (x-_sage_const_1 )*(y-_sage_const_1 +z-_sage_const_1 ) + n+_sage_const_1 -(y+z)


print(small_roots(f, [_sage_const_2 **_sage_const_20 , _sage_const_2 **_sage_const_512 , _sage_const_2 **_sage_const_512 ], _sage_const_5 , _sage_const_5 ))

