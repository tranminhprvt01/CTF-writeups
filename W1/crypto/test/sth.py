"""
# sagemeth
from sage.all import * # SageMath
from Crypto.Util.number import long_to_bytes, bytes_to_long # pycryptodome
import random

set_random_seed(17112024)

FLAG = b"HCMUS-CTF{??????????????????????????}"
m = bytes_to_long(FLAG)
p = int(random_prime(2**512))
x = random.randint(1, p)

out = (x * m ** 2) % p
print(f"{p = }")
print(f"{out = }")
print("Hint:", (x ** 2) % p)

# out = 5040698778515358896117040975188755501392008264565229431278383687062245732728785988127274373622879308810070035251881891536812769853143712276027118670396622
# Hint: 4227625707448108514580451504839496391165124363268718381797122500377491776597608736714098161939287851295972509421479866548645596785656749095246562741693902


"""

from Crypto.Util.number import *
from egcd import egcd

pgcd = lambda g1, g2: g1.monic() if not g2 else pgcd(g2, g1%g2)

n = 14522345803952951497854746956950429925714998568959329105863205708689185597355859293717114187773682087437056115503976819640144002239462632711502747866637932043366614821903920862363899959984636870000958750750983419968182435497432639514942413700204282567496628406198010952659927828472035115659189681437243789047864734407874916017869024955600036417945382400990673953014525661178396128073261668494708827415945567280112878906126975987081420301162844731698144544717058251742983595736398008606258830677240405674609798045982586017662281175658509107812545104789242101547411016679842609143686612094846357997607098036946974159819

ct1 = 12958994082704767729467983847493496476733123307172725452599822036951998238786745372306618183705966866053277246395468894482018535285184465501335591787791271667293966714564083791660333011817260068079774626208592964305668430077934263170152882723315221366045071199710220968120091402625656555934987730796571335135115758245436948062739057773179532373894660922324274780874057755144707362741815760933346845021294047019594881090300645470053730942117695366916034416583835532585436841922821179783068343849309001079323991717401395244377500867312117772043738986178913742296865573482074215514303359431554569689122135538844236034237
ct2 = 2113955544726990374545779358207294597126721958718803911158090276756063442389261656290989563782057417086282692034192325485313160125992822058842573479431969990730642851863191934094456673766166782888440264483490938748223953235410415079609742387917395625451363712731611383025449692145904580587799693041297852615026482837269275327958049359681162578625623923739849463589046962684491436964915263151468696220639361192823823768748471318446445269025418833128898006657253602421656068778255337952139751340290625845534830716895274546516497219657845581365268163620764154310717952199701486367227114583121809542836138920790167864853
e1 = 2000
e2 = 2**16 - 1



g, a, b = egcd(e1, e2)

print(g, a, b)


m_ = pow(ct1, a, n) * pow(ct2, b, n) % n

print(m_)

from gmpy2 import iroot

from tqdm import tqdm


for k in tqdm(range(17128971, 2**27)):
    if iroot(m_ + k*n, 5)[1] == True:
        print("Found")
        print(k)
        m = iroot(m_+k*n, 5)[0]
        print(long_to_bytes(m))
        break

