"""
from Crypto.Util.number import *


pgcd = lambda g1, g2: g1.monic() if not g2 else pgcd(g2, g1%g2)

n = 14522345803952951497854746956950429925714998568959329105863205708689185597355859293717114187773682087437056115503976819640144002239462632711502747866637932043366614821903920862363899959984636870000958750750983419968182435497432639514942413700204282567496628406198010952659927828472035115659189681437243789047864734407874916017869024955600036417945382400990673953014525661178396128073261668494708827415945567280112878906126975987081420301162844731698144544717058251742983595736398008606258830677240405674609798045982586017662281175658509107812545104789242101547411016679842609143686612094846357997607098036946974159819

ct1 = 12958994082704767729467983847493496476733123307172725452599822036951998238786745372306618183705966866053277246395468894482018535285184465501335591787791271667293966714564083791660333011817260068079774626208592964305668430077934263170152882723315221366045071199710220968120091402625656555934987730796571335135115758245436948062739057773179532373894660922324274780874057755144707362741815760933346845021294047019594881090300645470053730942117695366916034416583835532585436841922821179783068343849309001079323991717401395244377500867312117772043738986178913742296865573482074215514303359431554569689122135538844236034237
ct2 = 2113955544726990374545779358207294597126721958718803911158090276756063442389261656290989563782057417086282692034192325485313160125992822058842573479431969990730642851863191934094456673766166782888440264483490938748223953235410415079609742387917395625451363712731611383025449692145904580587799693041297852615026482837269275327958049359681162578625623923739849463589046962684491436964915263151468696220639361192823823768748471318446445269025418833128898006657253602421656068778255337952139751340290625845534830716895274546516497219657845581365268163620764154310717952199701486367227114583121809542836138920790167864853
e1 = 2000
e2 = 2**16 - 1



P.<x> = PolynomialRing(Zmod(n))


f = x^e1 - ct1
g = x^e2 - ct2

r = pgcd(f, g)

print(r)

coeff = r.coefficients()
m = (-coeff[0]) / coeff[1]


print(m)
"""


# This file was *autogenerated* from the file lmao.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_6893376086386561419838698019210625084105072958198117999188909127826231590566448000174970579911428646393945662110990534292897268475809055737928022920902197 = Integer(6893376086386561419838698019210625084105072958198117999188909127826231590566448000174970579911428646393945662110990534292897268475809055737928022920902197); _sage_const_12162077535424750708584517429237281311914148704019342612036347617155291306759164051529085041163989963340832656121632723930574603217881811261623740854946731 = Integer(12162077535424750708584517429237281311914148704019342612036347617155291306759164051529085041163989963340832656121632723930574603217881811261623740854946731); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4); _sage_const_3 = Integer(3)

from Crypto.Util.number import *


def is_square(a: int, p: int) -> bool: 
    return pow(a, (p - _sage_const_1 ) // _sage_const_2 , p) == _sage_const_1  

# ct = bytes_to_long(b'f-l\x1d\t_\xc56D\x1d\xf1\xf2\xa5\xfd\xb4\x83`\x03\xb2\xd8\xa2\x1c\x88\xee\xbe\x9a\x98BFPd-:\xc3\xb8\xa0\x13u\xe7\xc1TQv;\x9e\x07\xd3u\xa5O!;\xc4\xcc\\\xf9\x11Q\xce\x85=qdW\xa6]\xd7KPE\xa9\x90\x88\xc2.Cp\xec\xfd+H9?\x03\xb9F\xd7\xde\x14kG\x90d\xca\xed<\xca\t\xb2\xd1\xd9*\x87;$BG\xb0\xabE\xbd\x9bTR%\x9cE\xbe\x88,\xd4\x9a\x9f\xba\x9f\xa0\xc2\xeb')

ct = bytes_to_long(b"\x0bC\xee\xd3\xdf\x9e`\x02\x9c\xc7\x16\x92L\xfb]\x04\x84\xa0\xccN\xf9\xb7\xcd\xec\xc1\t\x8evi\x1e\xc5\xd0\x14\xf4\xe0\x03\xe7\xab\x13\xc7\xb4\xe2z\x0105F\xb0nB\xd7\x9a\xc8\xbdu\xa6\xbb\xcf\x88\x08>\xd49\xea\xd9\xd4\x1f\xcd\x95K'He\xe0f3\xb8\x81\xafk\xb8\xa2\x14!\xd2\x17[k n\x88\x99\n\xd5\xc6\xa0\xda\xd2\x8e\xde\xfa\xa2\xfc\xf6\x8a\x0f\xfd_\xabm\x98\xe0\xa0\x90\xfaN\xd0/\xf8\xf1h\xc4\x95\x02\xcd\xc9\x90\x91")


# Here, takes my private key >w<
p = _sage_const_6893376086386561419838698019210625084105072958198117999188909127826231590566448000174970579911428646393945662110990534292897268475809055737928022920902197 
q = _sage_const_12162077535424750708584517429237281311914148704019342612036347617155291306759164051529085041163989963340832656121632723930574603217881811261623740854946731 

# Public
n = p * q 
a = _sage_const_0 
b = _sage_const_1 
e = _sage_const_2 

E = EllipticCurve(Zmod(n), [a, b])

print(E)




Ep = EllipticCurve(GF(p), [a, b])
Eq = EllipticCurve(GF(q), [a, b])


Qp = Ep.lift_x(Integer(ct))
Qq = Ep.lift_x(Integer(ct))

Qx = crt([int(Qp.xy()[_sage_const_0 ]), int(Qq.xy()[_sage_const_0 ])], [p, q])

print(Qx)
print(ct)



print(p%_sage_const_4 , q%_sage_const_4 )


from sympy.ntheory import sqrt_mod

mp = sqrt_mod(ct**_sage_const_3 +_sage_const_1 , p)
mq = sqrt_mod(ct**_sage_const_3 +_sage_const_1 , q)

m = crt([mp, mq], [p, q]) #this is ct y coor 

print(m)


Q = E(ct, m)

print(Q)



# Ep = EllipticCurve(GF(p), [a, b])

# print(Ep)


# print(Ep.order())


# Qp = Ep.lift_x(Integer(ct))
# print(Qp)


# Pp = Qp*int(pow(e, -1, Ep.order()))

# print(Pp)



# Eq = EllipticCurve(GF(q), [a, b])

# print(Eq)
# print(Eq.order())




# Qq = Eq.lift_x(Integer(ct))
# print(Qq)


# Pq = Qq*int(pow(e, -1, Eq.order()))

# print(Pq)




# P = crt([int(Pp.xy()[0]), int(Pq.xy()[0])], [p, q])

# print(P)

# print(long_to_bytes(int(P)))

