

# This file was *autogenerated* from the file test.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_20 = Integer(20); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_60 = Integer(60); _sage_const_40 = Integer(40); _sage_const_100 = Integer(100)
import random
import itertools
import os

def add_noise(A):
    theta_x = RR(uniform(-pi, pi))
    print(theta_x)
    Rx = matrix(RR, [[_sage_const_1 , _sage_const_0 , _sage_const_0 ], [_sage_const_0 , cos(theta_x), -sin(theta_x)], [_sage_const_0 , sin(theta_x), cos(theta_x)]])
    print(Rx)
    A = Rx * A

    print("~"*_sage_const_20 )
    print(A)

    theta_y = (theta_x**_sage_const_2  + _sage_const_2 *theta_x + _sage_const_2 ) % RR(pi)
    Ry = matrix(RR, [[cos(theta_y), _sage_const_0 , sin(theta_y)], [_sage_const_0 , _sage_const_1 , _sage_const_0 ], [-sin(theta_y), _sage_const_0 , cos(theta_y)]])
    A = A * Ry

    print("~"*_sage_const_20 )
    print(A)

    theta_z = (theta_y**_sage_const_3  + _sage_const_3 *theta_y**_sage_const_2  + theta_y + _sage_const_3 ) % RR(pi)
    Rz = matrix(RR, [[cos(theta_z), -sin(theta_z), _sage_const_0 ], [sin(theta_z), cos(theta_z), _sage_const_0 ], [_sage_const_0 , _sage_const_0 , _sage_const_1 ]])
    A = Rz * A
    return A


ctr = _sage_const_60 
secrets = [RR(uniform(-_sage_const_2 ,_sage_const_2 )) for i in range(ctr)] # 60 entries sample uniform in [-2, 2]

ResultField = RealField(_sage_const_40 )

perm = list(itertools.permutations(range(_sage_const_3 ), int(_sage_const_2 )))


print(perm)

print(secrets, len(secrets))
print(ResultField)


A = random_matrix(RR, _sage_const_3 , _sage_const_3 )
idx = perm[-_sage_const_1 ]#random.choice(perm)
print(idx)
secret_index = _sage_const_0 
A[idx[_sage_const_0 ], idx[_sage_const_1 ]] = _sage_const_100 +secret_index
print(dumps(A).hex())
A[idx[_sage_const_0 ], idx[_sage_const_1 ]] = secrets[secret_index]


B = add_noise(A)
print(dumps(B).hex())

"""
we have to pass 60 test case where each test case we have:
    + random matrix A 3x3 on RR
    + after that, a random index from list perm which we known we be randomly choosen
    + A[idx[0], idx[1]] = 100 + i-th test case -> this just biefly mean in the random matrix A above, we pick a random (i, j) index and subtitute to 100 + i-th
    + but then after dumps out for us that matrix A with a noise entry inside, server re-assign that index of A into secrets[i] -> this is our goal

    + B = add_noise(A)

Considering the add noise function:

"""

