

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_8 = Integer(8); _sage_const_0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab = Integer(0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4); _sage_const_1 = Integer(1)
import os
import random
from Crypto.Util.number import bytes_to_long


flag = os.environ.get("FLAG", "fakeflag").encode()
bit_length = len(flag) * _sage_const_8 

# BLS12-381 curve
p = _sage_const_0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab 
K = GF(p)
E = EllipticCurve(K, (_sage_const_0 , _sage_const_4 ))

G1, G2 = E.gens()
o1, o2 = G1.order(), G2.order()

xs = [random.randrange(_sage_const_0 , o1) for _ in range(bit_length + _sage_const_1 )]
m = bytes_to_long(flag)


print(len(xs))

