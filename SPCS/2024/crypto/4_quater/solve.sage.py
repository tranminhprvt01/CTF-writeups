

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_9027 = Integer(9027); _sage_const_1 = Integer(1); _sage_const_50 = Integer(50); _sage_const_10 = Integer(10); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4); _sage_const_6 = Integer(6)#nc ctf.mf.grsu.by 9027

from pwn import *

io = remote("ctf.mf.grsu.by", _sage_const_9027 )


def xuli(s):
    res = ""
    if len(s) == _sage_const_1  and s == "x": return "1"
    for i in s:
        if i != "*":
            res+=i
        else:
            return res



for i in range(_sage_const_50 ):
    if i % _sage_const_10  == _sage_const_0 :
        io.recvuntil(b'Elliptic Curve defined by Ep(a,b): ')
        data = io.recvline().rstrip().decode().split()

        print(data)

        E = EllipticCurve(GF(int(data[-_sage_const_1 ])), [int(xuli(data[_sage_const_4 ])), int(data[_sage_const_6 ])])

        print(E)
    io.recvuntil(b'P = ')
    data = io.recvline().rstrip().decode().split()
    print(data)
    x, y = int(data[_sage_const_0 ][_sage_const_1 :-_sage_const_1 ]), int(data[_sage_const_1 ][:-_sage_const_1 ])

    try:
        P = E(x, y)
        print(P)

        data = io.recvline().rstrip().decode().split()
        print(data)
        k = int(xuli(data[_sage_const_0 ]))
        print(k, P.order())
        print(k % P.order())

        Q = k*P
        print(Q)
        io.sendline(f"{Q.xy()[_sage_const_0 ]}, {Q.xy()[_sage_const_1 ]}")
    except:
        io.sendline("None")



io.interactive()

