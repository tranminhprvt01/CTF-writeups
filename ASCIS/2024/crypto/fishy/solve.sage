from hashlib import sha256
from random import SystemRandom
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad


n = 100
m = 100
q = 7
FF = GF(q)



def decrypt(s):
    key = sha256(str([int(i) for i in s]).encode()).digest()
    cipher = AES.new(key, AES.MODE_CBC, iv)
    pt = cipher.decrypt(ct)
    return pt



seed = [6, 80, 158, 13, 171, 216, 164, 5, 73, 233, 6, 213, 63, 162, 90, 63, 208, 245, 101, 11, 120, 95, 78, 145, 159, 108, 105, 252, 241, 124, 92, 120, 18, 177, 243, 237, 132, 103, 237, 11, 75, 141, 172, 208, 155, 47, 111, 59, 118, 209, 169, 81, 141, 236, 104, 131, 104, 194, 246, 232, 14, 246, 68, 172]
v = [3, 0, 2, 4, 6, 4, 4, 1, 0, 6, 4, 1, 6, 0, 1, 6, 4, 4, 4, 1, 0, 5, 4, 5, 6, 2, 5, 5, 1, 0, 2, 6, 3, 0, 3, 0, 0, 0, 2, 2, 2, 6, 4, 6, 6, 3, 2, 3, 1, 2, 3, 0, 6, 4, 3, 0, 0, 6, 2, 1, 1, 1, 3, 5, 5, 5, 0, 4, 1, 5, 2, 1, 3, 2, 1, 0, 6, 0, 6, 3, 3, 3, 5, 0, 4, 1, 0, 3, 3, 6, 1, 4, 4, 3, 6, 1, 1, 3, 3, 0]
coms = [[3, 1, 6, 1, 4, 6, 4, 1, 3, 5, 3, 1, 1, 6, 4, 0, 3, 5, 6, 3, 4, 4, 6, 4, 0, 1, 3, 5, 3, 0, 6, 1, 4, 3, 6, 6, 1, 2, 6, 2, 6, 4, 1, 4, 0, 5, 5, 3, 3, 5, 3, 1, 6, 0, 5, 1, 3, 6, 5, 3, 4, 5, 5, 4, 2, 3, 6, 4, 5, 5, 3, 4, 4, 0, 4, 3, 5, 1, 1, 6, 2, 5, 3, 5, 6, 6, 1, 3, 5, 2, 1, 1, 6, 5, 6, 4, 1, 5, 5, 0], [2, 3, 1, 0, 2, 3, 6, 2, 2, 6, 4, 0, 2, 6, 2, 5, 4, 0, 4, 1, 6, 4, 3, 4, 4, 1, 6, 3, 0, 0, 5, 0, 5, 5, 5, 5, 3, 3, 6, 3, 0, 4, 4, 2, 1, 0, 6, 0, 3, 0, 1, 1, 1, 3, 4, 4, 0, 3, 1, 5, 0, 0, 5, 0, 2, 2, 0, 5, 5, 2, 3, 4, 3, 6, 3, 3, 1, 0, 0, 3, 5, 6, 4, 2, 5, 0, 1, 5, 6, 1, 4, 2, 3, 0, 6, 5, 1, 5, 1, 4], [2, 4, 5, 4, 1, 1, 4, 5, 5, 4, 3, 1, 4, 3, 2, 3, 2, 4, 4, 2, 3, 0, 4, 1, 0, 6, 1, 6, 2, 6, 6, 3, 4, 0, 6, 3, 0, 0, 6, 3, 4, 4, 2, 4, 0, 5, 1, 4, 4, 6, 6, 3, 1, 0, 3, 0, 0, 1, 5, 0, 6, 0, 1, 3, 4, 0, 2, 6, 1, 0, 4, 1, 2, 3, 0, 2, 0, 3, 0, 2, 4, 6, 1, 6, 0, 1, 5, 5, 3, 3, 0, 4, 1, 6, 2, 4, 1, 4, 4, 0], [3, 5, 5, 0, 6, 0, 0, 5, 0, 6, 6, 0, 6, 0, 6, 3, 3, 4, 1, 3, 5, 2, 3, 6, 1, 0, 3, 5, 4, 3, 0, 5, 1, 2, 4, 0, 3, 4, 0, 0, 6, 0, 1, 5, 1, 5, 4, 1, 6, 6, 0, 4, 6, 1, 4, 2, 2, 4, 0, 1, 1, 1, 3, 5, 2, 5, 4, 4, 4, 3, 0, 2, 3, 5, 4, 5, 4, 6, 0, 2, 1, 2, 2, 6, 6, 5, 1, 0, 3, 0, 3, 3, 1, 1, 2, 5, 2, 4, 6, 0], [2, 6, 5, 6, 1, 6, 3, 4, 6, 1, 2, 5, 2, 3, 1, 1, 3, 4, 6, 5, 2, 4, 0, 0, 0, 1, 3, 2, 6, 5, 5, 1, 2, 6, 0, 3, 2, 1, 4, 0, 5, 3, 4, 6, 3, 1, 5, 5, 6, 6, 3, 0, 0, 5, 3, 3, 4, 4, 5, 1, 1, 0, 5, 6, 2, 6, 3, 0, 5, 2, 3, 2, 4, 3, 4, 4, 3, 3, 2, 4, 6, 0, 6, 5, 6, 1, 2, 3, 5, 1, 5, 3, 4, 6, 3, 6, 3, 1, 2, 6], [2, 0, 1, 2, 6, 0, 5, 6, 6, 3, 2, 6, 1, 1, 6, 5, 2, 4, 4, 2, 2, 2, 0, 6, 1, 5, 1, 1, 1, 6, 6, 5, 4, 3, 4, 5, 4, 0, 0, 4, 4, 4, 1, 0, 2, 0, 4, 5, 6, 5, 4, 2, 1, 0, 0, 4, 1, 4, 3, 6, 6, 1, 0, 5, 3, 4, 0, 5, 6, 6, 2, 4, 3, 3, 6, 6, 1, 3, 4, 3, 1, 4, 4, 5, 5, 3, 6, 5, 2, 3, 1, 2, 4, 5, 6, 3, 5, 4, 6, 3], [3, 0, 1, 4, 0, 4, 5, 3, 4, 2, 4, 6, 0, 2, 1, 5, 4, 1, 5, 3, 0, 2, 2, 0, 0, 4, 3, 2, 3, 5, 6, 0, 6, 3, 1, 4, 2, 6, 5, 0, 6, 3, 3, 2, 2, 4, 1, 3, 4, 0, 2, 5, 1, 0, 5, 1, 2, 5, 2, 3, 4, 4, 0, 0, 1, 4, 0, 1, 2, 2, 5, 2, 5, 0, 3, 4, 2, 6, 4, 5, 0, 2, 0, 6, 1, 4, 2, 2, 3, 3, 2, 4, 0, 1, 0, 2, 1, 2, 5, 3], [2, 1, 1, 6, 5, 2, 4, 6, 6, 5, 2, 3, 1, 5, 4, 2, 1, 4, 6, 1, 6, 4, 0, 2, 4, 5, 5, 2, 1, 6, 0, 6, 3, 3, 5, 5, 4, 3, 6, 2, 2, 5, 3, 4, 0, 1, 4, 4, 5, 3, 3, 1, 3, 5, 0, 4, 5, 3, 1, 6, 2, 6, 2, 3, 4, 4, 2, 6, 5, 1, 6, 0, 0, 5, 6, 6, 4, 4, 3, 4, 5, 4, 5, 5, 6, 0, 2, 0, 6, 1, 5, 5, 5, 5, 4, 4, 3, 1, 1, 6], [5, 4, 6, 1, 3, 2, 3, 3, 6, 4, 4, 4, 6, 2, 3, 0, 1, 3, 0, 4, 0, 2, 4, 6, 4, 0, 1, 3, 5, 3, 4, 0, 4, 4, 0, 1, 2, 5, 3, 3, 4, 3, 5, 6, 5, 2, 4, 5, 2, 3, 3, 3, 3, 2, 3, 3, 3, 1, 2, 0, 4, 2, 0, 6, 5, 1, 4, 2, 5, 4, 0, 3, 1, 2, 1, 4, 6, 0, 1, 4, 5, 3, 5, 6, 4, 6, 6, 6, 1, 4, 6, 1, 5, 6, 3, 3, 3, 0, 1, 2]]
tass = [[1, 4, 0, 6, 1, 2, 1, 3, 5, 5, 1, 1, 6, 4, 3, 5, 5, 3, 3, 2, 4, 6, 1, 3, 0, 1, 2, 5, 4, 4, 5, 4, 2, 3, 0, 6, 1, 3, 1, 4, 1, 3, 6, 6, 6, 2, 2, 3, 2, 3, 1, 2, 6, 3, 5, 1, 5, 4, 0, 0, 4, 2, 2, 4, 1, 5, 5, 2, 1, 5, 5, 2, 1, 1, 0, 5, 6, 2, 6, 4, 3, 2, 5, 5, 0, 6, 0, 6, 5, 0, 0, 4, 6, 0, 3, 0, 5, 5, 4, 0], [4, 4, 6, 5, 0, 3, 4, 4, 4, 2, 0, 1, 0, 5, 6, 2, 5, 4, 0, 2, 4, 6, 5, 1, 1, 2, 6, 1, 2, 3, 5, 3, 0, 3, 4, 1, 3, 3, 1, 6, 2, 3, 4, 2, 2, 2, 3, 0, 4, 6, 3, 1, 6, 0, 0, 6, 1, 4, 3, 4, 3, 2, 6, 0, 3, 4, 1, 2, 4, 4, 0, 5, 1, 1, 0, 0, 5, 1, 1, 1, 1, 2, 3, 1, 5, 4, 1, 0, 0, 3, 2, 3, 0, 4, 5, 6, 0, 6, 1, 0], [1, 1, 4, 5, 2, 1, 4, 6, 5, 1, 3, 1, 5, 4, 6, 3, 0, 6, 1, 6, 5, 0, 4, 6, 1, 6, 5, 5, 6, 1, 0, 5, 6, 6, 6, 3, 0, 0, 1, 5, 0, 6, 1, 5, 4, 5, 1, 5, 5, 2, 4, 3, 1, 0, 5, 0, 6, 3, 6, 6, 6, 1, 0, 1, 5, 1, 5, 4, 1, 6, 5, 6, 2, 0, 6, 5, 5, 2, 1, 3, 0, 4, 2, 1, 5, 6, 5, 3, 3, 1, 2, 3, 3, 5, 0, 3, 3, 2, 5, 2], [6, 0, 1, 1, 4, 5, 1, 5, 2, 1, 5, 0, 0, 5, 4, 0, 2, 5, 1, 2, 3, 6, 2, 4, 3, 4, 1, 4, 4, 2, 2, 2, 3, 1, 4, 0, 1, 5, 0, 2, 4, 2, 3, 4, 4, 6, 6, 1, 3, 4, 6, 2, 6, 3, 6, 5, 2, 1, 3, 3, 3, 4, 6, 0, 5, 6, 6, 2, 4, 5, 3, 5, 6, 2, 2, 5, 2, 1, 4, 6, 5, 1, 6, 4, 5, 5, 6, 0, 6, 2, 1, 5, 0, 0, 4, 4, 6, 0, 0, 5], [4, 0, 0, 0, 6, 0, 2, 1, 1, 0, 4, 5, 2, 4, 3, 2, 1, 6, 0, 6, 4, 5, 3, 1, 1, 4, 0, 5, 4, 4, 6, 4, 1, 1, 6, 3, 0, 4, 4, 2, 6, 0, 2, 3, 4, 6, 0, 3, 0, 3, 5, 2, 2, 2, 4, 4, 1, 2, 1, 1, 0, 2, 5, 4, 2, 3, 0, 0, 6, 1, 5, 5, 5, 3, 5, 4, 6, 2, 2, 0, 4, 3, 1, 3, 3, 5, 4, 0, 5, 6, 3, 3, 3, 5, 4, 6, 1, 4, 0, 2], [1, 6, 1, 0, 0, 2, 4, 0, 0, 1, 1, 0, 2, 3, 4, 5, 5, 0, 1, 5, 2, 4, 6, 6, 3, 5, 1, 6, 2, 1, 6, 4, 5, 0, 4, 0, 5, 0, 5, 4, 6, 3, 6, 0, 6, 0, 2, 6, 1, 1, 6, 4, 2, 6, 1, 4, 6, 0, 0, 2, 1, 3, 2, 1, 5, 1, 5, 3, 6, 2, 5, 1, 1, 3, 6, 5, 4, 1, 2, 5, 3, 4, 3, 6, 2, 2, 0, 4, 4, 5, 3, 2, 1, 6, 1, 3, 0, 0, 1, 2], [3, 0, 0, 6, 3, 3, 0, 1, 1, 4, 4, 4, 0, 1, 4, 6, 5, 4, 3, 3, 0, 5, 1, 2, 1, 5, 5, 3, 0, 0, 0, 6, 1, 2, 0, 3, 1, 4, 3, 3, 3, 3, 5, 5, 2, 2, 6, 4, 4, 0, 5, 6, 2, 2, 1, 0, 5, 4, 0, 1, 2, 2, 2, 6, 6, 6, 0, 4, 1, 6, 1, 5, 6, 3, 4, 6, 4, 2, 1, 5, 5, 6, 3, 6, 5, 3, 5, 2, 6, 5, 3, 2, 2, 2, 3, 2, 2, 2, 3, 1], [6, 0, 4, 6, 1, 6, 4, 1, 6, 4, 0, 1, 6, 5, 4, 3, 5, 6, 4, 5, 5, 5, 5, 4, 2, 0, 6, 6, 6, 5, 4, 3, 5, 1, 6, 6, 1, 4, 1, 4, 4, 2, 2, 1, 3, 6, 3, 2, 5, 1, 1, 2, 2, 0, 3, 1, 3, 6, 3, 1, 4, 0, 5, 5, 3, 3, 3, 2, 6, 0, 5, 0, 3, 1, 2, 6, 3, 5, 2, 4, 2, 1, 2, 2, 4, 1, 5, 4, 0, 2, 3, 0, 2, 0, 5, 4, 2, 4, 6, 1], [6, 6, 1, 5, 0, 4, 0, 3, 2, 5, 1, 0, 3, 3, 5, 1, 1, 1, 3, 3, 1, 4, 5, 4, 1, 2, 5, 5, 0, 5, 5, 0, 0, 4, 4, 5, 5, 5, 1, 0, 4, 0, 5, 6, 2, 5, 3, 5, 0, 2, 1, 4, 0, 1, 5, 2, 1, 0, 3, 0, 5, 6, 6, 2, 5, 3, 3, 3, 3, 1, 5, 4, 4, 3, 6, 3, 3, 6, 1, 6, 5, 4, 0, 5, 5, 4, 0, 0, 3, 4, 0, 1, 1, 4, 4, 1, 4, 2, 3, 0]]
verifs = [[3, 4, 6, 6, 2, 0, 2, 1, 4, 0, 5, 4, 1, 2, 4, 0, 3, 4, 3, 5, 6, 4, 3, 3, 4, 2, 0, 1, 4, 3, 6, 1, 2, 6, 5, 4, 3, 4, 3, 0, 4, 2, 0, 4, 1, 1, 3, 3, 1, 4, 2, 3, 6, 4, 3, 0, 0, 1, 5, 0, 0, 1, 1, 5, 5, 4, 4, 0, 4, 6, 4, 1, 1, 5, 5, 1, 1, 0, 2, 3, 4, 1, 6, 0, 4, 6, 5, 5, 5, 1, 6, 0, 1, 6, 2, 2, 0, 6, 3, 4], [0, 3, 4, 1, 1, 0, 2, 5, 5, 3, 2, 2, 2, 2, 3, 4, 5, 0, 0, 6, 6, 1, 2, 4, 2, 2, 5, 2, 0, 2, 5, 2, 4, 6, 3, 3, 4, 2, 0, 3, 2, 5, 1, 6, 1, 0, 3, 3, 5, 5, 6, 2, 1, 5, 5, 1, 4, 3, 5, 1, 6, 4, 4, 5, 0, 6, 1, 1, 1, 0, 5, 4, 6, 3, 5, 1, 6, 0, 6, 5, 2, 0, 0, 2, 0, 1, 3, 4, 3, 6, 4, 6, 3, 3, 5, 5, 6, 2, 1, 3], [3, 1, 3, 5, 4, 0, 6, 5, 3, 6, 5, 1, 1, 4, 5, 3, 2, 1, 4, 5, 2, 4, 3, 5, 3, 5, 5, 0, 5, 0, 3, 1, 4, 3, 1, 4, 3, 1, 1, 6, 3, 5, 6, 5, 4, 5, 4, 5, 3, 0, 4, 5, 2, 6, 5, 0, 5, 3, 2, 6, 3, 6, 3, 6, 4, 2, 0, 1, 2, 6, 5, 3, 6, 2, 3, 1, 6, 4, 6, 2, 1, 3, 3, 6, 4, 1, 2, 2, 6, 2, 3, 0, 0, 4, 2, 1, 5, 1, 3, 4], [4, 0, 4, 4, 0, 6, 6, 5, 2, 6, 5, 1, 0, 5, 3, 3, 1, 6, 5, 2, 5, 0, 6, 6, 6, 1, 5, 3, 5, 5, 0, 2, 4, 1, 5, 0, 4, 0, 5, 0, 6, 5, 3, 0, 1, 5, 2, 1, 6, 2, 3, 4, 4, 6, 5, 1, 0, 1, 0, 2, 6, 5, 4, 4, 1, 1, 6, 2, 5, 0, 5, 2, 6, 4, 3, 0, 4, 2, 4, 3, 2, 6, 1, 6, 5, 5, 4, 2, 2, 6, 6, 6, 2, 2, 0, 5, 1, 6, 6, 0], [1, 6, 1, 6, 0, 0, 4, 6, 0, 0, 1, 5, 2, 0, 3, 1, 2, 1, 1, 0, 5, 1, 0, 6, 5, 6, 1, 0, 2, 0, 3, 3, 1, 2, 3, 6, 6, 6, 2, 0, 6, 3, 1, 6, 6, 3, 4, 1, 2, 0, 5, 1, 6, 1, 2, 2, 2, 6, 0, 4, 4, 1, 2, 1, 0, 4, 5, 6, 1, 5, 4, 6, 5, 2, 3, 0, 2, 1, 3, 6, 2, 0, 3, 5, 6, 1, 6, 1, 2, 3, 4, 6, 3, 6, 0, 6, 6, 0, 5, 6], [6, 5, 4, 2, 5, 6, 5, 6, 1, 4, 2, 0, 6, 1, 6, 5, 3, 6, 1, 6, 1, 2, 3, 0, 0, 5, 5, 1, 6, 1, 1, 0, 2, 1, 3, 5, 5, 1, 0, 0, 5, 5, 0, 6, 6, 4, 3, 5, 3, 3, 1, 1, 6, 4, 1, 6, 1, 1, 6, 6, 3, 3, 0, 4, 3, 5, 5, 4, 5, 5, 3, 5, 2, 5, 5, 5, 4, 6, 2, 3, 3, 1, 1, 6, 4, 6, 0, 5, 6, 0, 6, 3, 6, 4, 0, 0, 2, 2, 1, 2], [3, 5, 5, 1, 5, 1, 4, 2, 0, 2, 3, 2, 6, 0, 2, 2, 5, 6, 2, 0, 0, 6, 5, 3, 4, 2, 4, 2, 4, 3, 1, 0, 6, 0, 5, 2, 1, 1, 3, 3, 5, 4, 5, 6, 6, 2, 4, 1, 1, 2, 4, 5, 2, 3, 4, 2, 3, 5, 1, 6, 6, 4, 4, 3, 4, 0, 1, 5, 0, 1, 0, 6, 2, 1, 1, 3, 4, 1, 4, 3, 5, 6, 3, 0, 5, 0, 3, 3, 3, 3, 4, 4, 5, 5, 0, 0, 6, 2, 1, 6], [6, 2, 3, 0, 3, 3, 3, 0, 5, 3, 1, 5, 0, 2, 3, 0, 2, 2, 5, 5, 6, 5, 1, 3, 4, 2, 0, 2, 3, 4, 1, 0, 3, 2, 4, 5, 3, 4, 2, 6, 6, 1, 2, 4, 5, 3, 1, 4, 3, 4, 5, 1, 3, 4, 5, 1, 1, 6, 6, 1, 0, 1, 5, 3, 3, 4, 5, 4, 0, 5, 6, 4, 4, 0, 2, 5, 5, 2, 1, 4, 6, 3, 3, 3, 2, 5, 1, 6, 5, 3, 1, 4, 6, 3, 1, 2, 5, 1, 5, 1], [6, 1, 5, 3, 2, 3, 5, 3, 5, 2, 1, 0, 1, 2, 2, 4, 4, 1, 6, 2, 5, 0, 6, 4, 6, 5, 6, 0, 6, 5, 4, 4, 5, 4, 3, 1, 1, 1, 0, 2, 3, 0, 6, 2, 4, 0, 6, 1, 6, 5, 5, 2, 6, 3, 4, 2, 5, 0, 5, 5, 5, 0, 6, 3, 3, 2, 5, 1, 1, 4, 4, 1, 5, 1, 6, 0, 5, 3, 6, 4, 2, 1, 0, 0, 4, 2, 3, 5, 3, 5, 1, 3, 5, 3, 5, 6, 4, 0, 0, 4]]
ct = b'\xf7\xfd\thn\xc0="\xed\x15\xa4\x9e\xba\x18k\xf1\x92\xb2~\x14\xcc\n\xc1\xb2\xa4F\x13\x89\xaa</!7\xb5\x03Z\xcd6\xbd\x12\x04\xf6\xd7\x84\xbb0\x14f'
iv = b'l"\xf8uy\xeai\xc2@\xc4\xdbPo\x16w\x0e'


gen_seed = bytes(seed)

F = []
for i in range(m):
    cur = []
    for j in range(n):
        cur.append([])
        for k in range(n):
            cur[-1].append(sha256(gen_seed).digest()[0] % q)
            gen_seed = sha256(gen_seed).digest()
    F.append(matrix(FF, n, n, cur))





for i in range(9):
    a = sha256(bytes([int(i) for i in coms[i] + v + verifs[i]])).digest()[0] % q
    print(a, i)


# 6th
t = matrix(FF, tass[6]).T
print(t.parent())



M = []

for i in range(m):
    #print((t.T*(matrix(FF, F[i]) + matrix(FF, F[i]).transpose())))
    M.append((t.T*(F[i] + F[i].T)).list())



for i in range(m):
    M_ = M[:i] + M[i+1:]
    M_ = matrix(FF, M_)
    if rank(M_) == 99:
        print(i)


M = M[1:]


for s_end in range(q):

    new_M = []
    verif_ = []

    for i in range(1,m):
        A = M[i-1]
        new_M.append(A[1:])
        verif_.append(verifs[6][i]-s_end*A[0])


    new_M = matrix(FF, 99, 99, new_M)
    if new_M.rank() == 99:
        s_ = new_M.solve_right(matrix(FF, 99, 1, verif_))
        print(s_.list())
        s = [s_end] + s_.list()
        print(decrypt(s))
        
    
