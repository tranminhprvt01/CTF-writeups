

# This file was *autogenerated* from the file test.sage
from sage.all_cmdline import *   # import sage library

_sage_const_512 = Integer(512); _sage_const_2 = Integer(2); _sage_const_265 = Integer(265); _sage_const_0p5 = RealNumber('0.5'); _sage_const_0p015 = RealNumber('0.015'); _sage_const_0 = Integer(0)
import itertools

"""
def small_roots(f, bounds, m=1, d=None):
	if not d:
		d = f.degree()

	if isinstance(f, Polynomial):
		x, = polygens(f.base_ring(), f.variable_name(), 1)
		f = f(x)

	R = f.base_ring()
	N = R.cardinality()
	
	f /= f.coefficients().pop(0)
	f = f.change_ring(ZZ)

	G = Sequence([], f.parent())
	for i in range(m+1):
		base = N^(m-i) * f^i
		for shifts in itertools.product(range(d), repeat=f.nvariables()):
			g = base * prod(map(power, f.variables(), shifts))
			G.append(g)

	B, monomials = G.coefficient_matrix()
	monomials = vector(monomials)

	factors = [monomial(*bounds) for monomial in monomials]
	for i, factor in enumerate(factors):
		B.rescale_col(i, factor)

	B = B.dense_matrix().LLL()

	B = B.change_ring(QQ)
	for i, factor in enumerate(factors):
		B.rescale_col(i, 1/factor)

	H = Sequence([], f.parent().change_ring(QQ))
	for h in filter(None, B*monomials):
		H.append(h)
		I = H.ideal()
		if I.dimension() == -1:
			H.pop()
		elif I.dimension() == 0:
			roots = []
			for root in I.variety(ring=ZZ):
				root = tuple(R(root[var]) for var in f.variables())
				roots.append(root)
			return roots

	return []
"""




from Crypto.Util.number import *

p = getPrime(_sage_const_512 )
q = getPrime(_sage_const_512 )
n = p*q
p_lsb = p%_sage_const_2 **_sage_const_265 
print(p_lsb)

P = PolynomialRing(Zmod(n), names=('x',)); (x,) = P._first_ngens(1)

f = _sage_const_2 **_sage_const_265 *x + p_lsb
f = f.monic()


r = f.small_roots(X = _sage_const_2 **(_sage_const_512 -_sage_const_265 ), beta = _sage_const_0p5 , epsilon = _sage_const_0p015 )
print(r)
p_msb = r[_sage_const_0 ]

print(p_msb)

print(_sage_const_2 **_sage_const_265 *p_msb + p_lsb)
print(p)

