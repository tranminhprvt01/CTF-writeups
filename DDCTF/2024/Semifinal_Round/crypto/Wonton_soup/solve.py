
from Crypto.Util.number import long_to_bytes as ltb, bytes_to_long as btl 
from math import gcd, prod, isqrt

e = 65537
d = 11104012999836174730756002235665976183159876779084997801485779477565805210334358611561689522759772083449375028393701082967330945714435079891472885927608547166765267982141599159557126633999735116275942968600985062240930674550952665638332975051568142112239097174155483981899740502650254486802690098351060007813
c = 22901231112172133921223023279932848644955468094189943499578909198019077221924833200565673189376253713488688464220048897712120515832982702942290897075289971346156577914219185742348240953225147347048438364584574006395759857925164450267599965997307882299205421296903039480790759546170709029003277455548971450350
n = 58493987619183617340210282012606790540611594282685756845589062745858867942262105966234100655341787881442142210098704917163408744416600902728676032878199626884130417152696885610374378019731470282804599072068908299895512483158711696105516436984751805641649115163723043599171244465850342932433816420742930825017

ok = [(2,2), (3,2), (5,1), (11, 1), (13,1), (19, 1), (29, 1), (193, 1), (313, 1), (17932176001, 1), (47366548332401974147127683791165240394442374996033809582126744987049546963457108646916760920752873953101983513072405924043781658020709473881852588292933497512864817851717800453990998605344095440550159178561327323080009101764693952134920452306323900285609792608752352677086482311689454750213, 1)]


kphi = e*d - 1


    

tmp = []
for i, j in ok:
    for cnt in range(j):
        tmp.append(i)

assert(prod(tmp) == kphi)

def solve(a, b, c):
    denta = b*b-4*a*c
    denta = isqrt(denta)


    x1 = (-b - denta) // (2*a)
    x2 = (-b + denta) // (2*a)

    return x1, x2

def check(S, P):
    x1, x2 = solve(1, -S, P)

    if x1 + x2 == S and x1*x2 == P: return x1, x2
    else:  return  -1, -1


def tryy(p,pos):
    if pos == len(tmp):
        # if (gcd(p + 1, n) !=1):
        #     hehe = gcd(n, p + 1)
        #     print(hehe)
        #     print(n // hehe)
        #     exit(0)
        phi = kphi // p 

        p_q = n + 1 - phi
        x1, x2 = check(p_q, n)
        if (x1 != -1 and x2 != -1):
            print(f"flag:{ltb(x1)}")
            print(f"flag{ltb(x2)}")
    else:
        tryy(p * tmp[pos], pos + 1)
        tryy(p, pos + 1)


tryy(1, 0)






p = 5364346700992198475952365233423886482510015758467100733469342040774291336671167924988141706772840568374844930711194274625468519803921160470184771907857731

q = 10904214600515002550473064573563577433692298809712499502053117262913911520604236729123792436453940071680636883486353794352835270437065964456196936104573907


print(long_to_bytes(p))

print(long_to_bytes(q))