

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_91725037968177304595356229847249124275634668177296814741529573801095034173523 = Integer(91725037968177304595356229847249124275634668177296814741529573801095034173523); _sage_const_70531110072509298803201621415592601393387767551616451246154013182556851771153 = Integer(70531110072509298803201621415592601393387767551616451246154013182556851771153); _sage_const_3128592393207593101775747511252725036748347188549955655359151644135290113924 = Integer(3128592393207593101775747511252725036748347188549955655359151644135290113924); _sage_const_58557423359848065299975326112549968009731308453890093788309799350030839061814 = Integer(58557423359848065299975326112549968009731308453890093788309799350030839061814); _sage_const_75706164316220403423610626861470333353921225390662051210752341134842694488677 = Integer(75706164316220403423610626861470333353921225390662051210752341134842694488677); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_0 = Integer(0)
from Crypto.Util.number import getPrime, bytes_to_long, long_to_bytes
import hashlib
import random

"""
p = getPrime(256)

A = random.randint(0, 2**256)
B = random.randint(0, 2**256)

E = EllipticCurve(GF(p), [A, B])

print(E)

"""

p = _sage_const_91725037968177304595356229847249124275634668177296814741529573801095034173523 
x1 = _sage_const_70531110072509298803201621415592601393387767551616451246154013182556851771153 
y1 = _sage_const_3128592393207593101775747511252725036748347188549955655359151644135290113924 
x2 = _sage_const_58557423359848065299975326112549968009731308453890093788309799350030839061814 
y2 = _sage_const_75706164316220403423610626861470333353921225390662051210752341134842694488677 

def attack(p, x1, y1, x2, y2):
    """
    Recovers the a and b parameters from an elliptic curve when two points are known.
    :param p: the prime of the curve base ring
    :param x1: the x coordinate of the first point
    :param y1: the y coordinate of the first point
    :param x2: the x coordinate of the second point
    :param y2: the y coordinate of the second point
    :return: a tuple containing the a and b parameters of the elliptic curve
    """
    a = pow(x1 - x2, -_sage_const_1 , p) * (pow(y1, _sage_const_2 , p) - pow(y2, _sage_const_2 , p) - (pow(x1, _sage_const_3 , p) - pow(x2, _sage_const_3 , p))) % p
    b = (pow(y1, _sage_const_2 , p) - pow(x1, _sage_const_3 , p) - a * x1) % p
    return int(a), int(b)



a, b = attack(p, x1, y1, x2, y2)

E = EllipticCurve(GF(p), [a, b])

j_E = E.j_invariant()

print(j_E)


X=E(_sage_const_70531110072509298803201621415592601393387767551616451246154013182556851771153 ,_sage_const_3128592393207593101775747511252725036748347188549955655359151644135290113924 )

Y=E(_sage_const_58557423359848065299975326112549968009731308453890093788309799350030839061814 ,_sage_const_75706164316220403423610626861470333353921225390662051210752341134842694488677 )


S = int(j_E) * (X + Y)

flag = "flag{" + hashlib.md5(str(S.xy()[_sage_const_0 ]).encode()).hexdigest() + "}"
print(flag)

