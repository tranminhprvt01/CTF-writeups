

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_50715874831135134332364423637678173040419672583250679377129877143387515226085125207150600442235744443917116243675592756787829121115310880413184044801880692483302769859260941277845693355926084733183108735230155228963083794488083052708165287266142046739788141928361967233520194595218826743341002494699794660375 = Integer(50715874831135134332364423637678173040419672583250679377129877143387515226085125207150600442235744443917116243675592756787829121115310880413184044801880692483302769859260941277845693355926084733183108735230155228963083794488083052708165287266142046739788141928361967233520194595218826743341002494699794660375); _sage_const_10003452472287110965416698145916432100428864313832213815874233900407936313739342673806901825121570640259435958766691297768472480031241553804444497534009597 = Integer(10003452472287110965416698145916432100428864313832213815874233900407936313739342673806901825121570640259435958766691297768472480031241553804444497534009597); _sage_const_3185029486778124438286571050938945590396554464660244646382877064442885802112825154056049581347766979186100439225322798645257635936978783803464480881551505 = Integer(3185029486778124438286571050938945590396554464660244646382877064442885802112825154056049581347766979186100439225322798645257635936978783803464480881551505); _sage_const_97 = Integer(97); _sage_const_89491695026514143171409019724372345025805201812268701600976035922702855544784496469649217021472768994671172703919322633003074688932226165626907313874695776965730433748778201434794015507655737492723382950018378043030469987403496824829967882486088505771215065070317241752668893321533989368877474378675835933547 = Integer(89491695026514143171409019724372345025805201812268701600976035922702855544784496469649217021472768994671172703919322633003074688932226165626907313874695776965730433748778201434794015507655737492723382950018378043030469987403496824829967882486088505771215065070317241752668893321533989368877474378675835933547); _sage_const_28024259673401010662069205649403221663587763505486551353976617075802265775279463847946869075258685169417839329454195376663446387510075180880267521347016027390559376480441959484814494994362691697610448145907991545102599813585290040326220957004677702201068445525182392958134005568163311645932419481509177851278 = Integer(28024259673401010662069205649403221663587763505486551353976617075802265775279463847946869075258685169417839329454195376663446387510075180880267521347016027390559376480441959484814494994362691697610448145907991545102599813585290040326220957004677702201068445525182392958134005568163311645932419481509177851278); _sage_const_3505130379448207855920674909936114656592006831516044195043580578902952661222208019686602778929119612378290649077065911222947805945588561371389440081844549 = Integer(3505130379448207855920674909936114656592006831516044195043580578902952661222208019686602778929119612378290649077065911222947805945588561371389440081844549); _sage_const_2511615708557517031287765863580789294806406360542805716879187157860442709977333493142377495735006818906017101772644298016146243951952413184782502636283696 = Integer(2511615708557517031287765863580789294806406360542805716879187157860442709977333493142377495735006818906017101772644298016146243951952413184782502636283696); _sage_const_89491695026514143171409019724372345025805201812268701600976035922702855544784496469649217021472768994671172703919322633003074688932226165626907313874695776965730433748778201434794015507655737492723382950018378043030456947399014004536374868155191403847785463977401028039979304108922899018847729133685709363694 = Integer(89491695026514143171409019724372345025805201812268701600976035922702855544784496469649217021472768994671172703919322633003074688932226165626907313874695776965730433748778201434794015507655737492723382950018378043030456947399014004536374868155191403847785463977401028039979304108922899018847729133685709363694)
import logging

def _polynomial_hgcd(ring, a0, a1):
    assert a1.degree() < a0.degree()

    if a1.degree() <= a0.degree() / _sage_const_2 :
        return _sage_const_1 , _sage_const_0 , _sage_const_0 , _sage_const_1 

    m = a0.degree() // _sage_const_2 
    b0 = ring(a0.list()[m:])
    b1 = ring(a1.list()[m:])
    R00, R01, R10, R11 = _polynomial_hgcd(ring, b0, b1)
    d = R00 * a0 + R01 * a1
    e = R10 * a0 + R11 * a1
    if e.degree() < m:
        return R00, R01, R10, R11

    q, f = d.quo_rem(e)
    g0 = ring(e.list()[m // _sage_const_2 :])
    g1 = ring(f.list()[m // _sage_const_2 :])
    S00, S01, S10, S11 = _polynomial_hgcd(ring, g0, g1)
    return S01 * R00 + (S00 - q * S01) * R10, S01 * R01 + (S00 - q * S01) * R11, S11 * R00 + (S10 - q * S11) * R10, S11 * R01 + (S10 - q * S11) * R11


def fast_polynomial_gcd(a0, a1):
    """
    Uses a divide-and-conquer algorithm (HGCD) to compute the polynomial gcd.
    More information: Aho A. et al., "The Design and Analysis of Computer Algorithms" (Section 8.9)
    :param a0: the first polynomial
    :param a1: the second polynomial
    :return: the polynomial gcd
    """
    # TODO: implement extended variant of half GCD?
    assert a0.parent() == a1.parent()

    if a0.degree() == a1.degree():
        if a1 == _sage_const_0 :
            return a0
        a0, a1 = a1, a0 % a1
    elif a0.degree() < a1.degree():
        a0, a1 = a1, a0

    assert a0.degree() > a1.degree()
    ring = a0.parent()

    # Optimize recursive tail call.
    while True:
        logging.debug(f"deg(a0) = {a0.degree()}, deg(a1) = {a1.degree()}")
        _, r = a0.quo_rem(a1)
        if r == _sage_const_0 :
            return a1.monic()

        R00, R01, R10, R11 = _polynomial_hgcd(ring, a0, a1)
        b0 = R00 * a0 + R01 * a1
        b1 = R10 * a0 + R11 * a1
        if b1 == _sage_const_0 :
            return b0.monic()

        _, r = b0.quo_rem(b1)
        if r == _sage_const_0 :
            return b1.monic()

        a0 = b1
        a1 = r





from Crypto.Util.number import *



c0=_sage_const_50715874831135134332364423637678173040419672583250679377129877143387515226085125207150600442235744443917116243675592756787829121115310880413184044801880692483302769859260941277845693355926084733183108735230155228963083794488083052708165287266142046739788141928361967233520194595218826743341002494699794660375 
a0=_sage_const_10003452472287110965416698145916432100428864313832213815874233900407936313739342673806901825121570640259435958766691297768472480031241553804444497534009597 
b0=_sage_const_3185029486778124438286571050938945590396554464660244646382877064442885802112825154056049581347766979186100439225322798645257635936978783803464480881551505 
e=_sage_const_97 
n=_sage_const_89491695026514143171409019724372345025805201812268701600976035922702855544784496469649217021472768994671172703919322633003074688932226165626907313874695776965730433748778201434794015507655737492723382950018378043030469987403496824829967882486088505771215065070317241752668893321533989368877474378675835933547 
c1=_sage_const_28024259673401010662069205649403221663587763505486551353976617075802265775279463847946869075258685169417839329454195376663446387510075180880267521347016027390559376480441959484814494994362691697610448145907991545102599813585290040326220957004677702201068445525182392958134005568163311645932419481509177851278 
a1=_sage_const_3505130379448207855920674909936114656592006831516044195043580578902952661222208019686602778929119612378290649077065911222947805945588561371389440081844549 
b1=_sage_const_2511615708557517031287765863580789294806406360542805716879187157860442709977333493142377495735006818906017101772644298016146243951952413184782502636283696 




P = PolynomialRing(Zmod(n), names=('x',)); (x,) = P._first_ngens(1)


f = (a0*x + b0)**e - c0
g = (a1*x + b1)**e - c1





print(fast_polynomial_gcd(f, g))


print(long_to_bytes(-_sage_const_89491695026514143171409019724372345025805201812268701600976035922702855544784496469649217021472768994671172703919322633003074688932226165626907313874695776965730433748778201434794015507655737492723382950018378043030456947399014004536374868155191403847785463977401028039979304108922899018847729133685709363694 %n))

