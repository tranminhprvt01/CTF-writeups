# -*- coding: utf-8 -*-


# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_50 = Integer(50); _sage_const_25 = Integer(25); _sage_const_40 = Integer(40); _sage_const_98 = Integer(98); _sage_const_35 = Integer(35); _sage_const_87 = Integer(87); _sage_const_54 = Integer(54); _sage_const_16 = Integer(16); _sage_const_65 = Integer(65); _sage_const_60 = Integer(60); _sage_const_95 = Integer(95); _sage_const_20 = Integer(20); _sage_const_4 = Integer(4); _sage_const_79 = Integer(79); _sage_const_69 = Integer(69); _sage_const_15 = Integer(15); _sage_const_53 = Integer(53); _sage_const_26 = Integer(26); _sage_const_92 = Integer(92); _sage_const_48 = Integer(48); _sage_const_56 = Integer(56); _sage_const_99 = Integer(99); _sage_const_83 = Integer(83); _sage_const_2 = Integer(2); _sage_const_47 = Integer(47); _sage_const_59 = Integer(59); _sage_const_42 = Integer(42); _sage_const_3 = Integer(3); _sage_const_19 = Integer(19); _sage_const_5 = Integer(5); _sage_const_24 = Integer(24); _sage_const_6 = Integer(6); _sage_const_21 = Integer(21); _sage_const_28 = Integer(28); _sage_const_18 = Integer(18); _sage_const_8 = Integer(8); _sage_const_22 = Integer(22); _sage_const_14 = Integer(14); _sage_const_31 = Integer(31); _sage_const_11 = Integer(11); _sage_const_46 = Integer(46); _sage_const_45 = Integer(45); _sage_const_23 = Integer(23); _sage_const_17 = Integer(17); _sage_const_39 = Integer(39); _sage_const_93 = Integer(93); _sage_const_84 = Integer(84); _sage_const_90 = Integer(90); _sage_const_63 = Integer(63); _sage_const_76 = Integer(76); _sage_const_61 = Integer(61); _sage_const_57 = Integer(57); _sage_const_62 = Integer(62); _sage_const_55 = Integer(55); _sage_const_91 = Integer(91); _sage_const_96 = Integer(96); _sage_const_74 = Integer(74); _sage_const_78 = Integer(78); _sage_const_64 = Integer(64); _sage_const_2315157014596884429538745310505697576231247890652617038454441871904638642633138761681911931668903937398814215580589949726790160298882443329224130590117763020425392822361299940434853674756207376179949432149288134358028 = Integer(2315157014596884429538745310505697576231247890652617038454441871904638642633138761681911931668903937398814215580589949726790160298882443329224130590117763020425392822361299940434853674756207376179949432149288134358028); _sage_const_100 = Integer(100); _sage_const_1 = Integer(1)# LƯU Ý: Chạy bằng lệnh: sage solve.sage
# PHIÊN BẢN CUỐI CÙNG: Tấn công phân rã để khôi phục 'a', sau đó tính c2.

from Crypto.Util.number import long_to_bytes
import hashlib
import sys

#================================================================
#                      MAIN SCRIPT
#================================================================

print("[+] Bắt đầu giải quyết challenge bằng phương pháp Decomposition Attack cho 'a'...")

# Dữ liệu từ challenge bạn đã cung cấp
p_tietze = [_sage_const_50 , _sage_const_25 , _sage_const_40 , _sage_const_98 , _sage_const_35 , _sage_const_87 , _sage_const_54 , _sage_const_16 , _sage_const_65 , _sage_const_60 , _sage_const_95 , _sage_const_20 , _sage_const_4 , _sage_const_79 , _sage_const_69 , _sage_const_15 , _sage_const_53 , _sage_const_26 , _sage_const_92 , _sage_const_87 , _sage_const_48 , _sage_const_56 , _sage_const_99 , _sage_const_83 , _sage_const_2 , _sage_const_56 , _sage_const_47 , _sage_const_59 , _sage_const_42 , _sage_const_3 , _sage_const_19 , _sage_const_53 ]
q_tietze = [_sage_const_5 , _sage_const_24 , _sage_const_6 , _sage_const_21 , _sage_const_6 , _sage_const_28 , _sage_const_20 , _sage_const_48 , _sage_const_15 , _sage_const_18 , _sage_const_18 , _sage_const_8 , _sage_const_47 , _sage_const_22 , _sage_const_22 , _sage_const_3 , _sage_const_14 , _sage_const_40 , _sage_const_18 , _sage_const_26 , _sage_const_4 , _sage_const_31 , _sage_const_11 , _sage_const_16 , _sage_const_8 , _sage_const_46 , _sage_const_45 , _sage_const_23 , _sage_const_17 , _sage_const_39 , _sage_const_24 , _sage_const_21 , _sage_const_50 , _sage_const_25 , _sage_const_40 , _sage_const_98 , _sage_const_35 , _sage_const_87 , _sage_const_54 , _sage_const_16 , _sage_const_65 , _sage_const_60 , _sage_const_95 , _sage_const_20 , _sage_const_4 , _sage_const_79 , _sage_const_69 , _sage_const_15 , _sage_const_53 , _sage_const_26 , _sage_const_92 , _sage_const_87 , _sage_const_48 , _sage_const_56 , _sage_const_99 , _sage_const_83 , _sage_const_2 , _sage_const_56 , _sage_const_47 , _sage_const_59 , _sage_const_42 , _sage_const_3 , _sage_const_19 , _sage_const_53 , -_sage_const_21 , -_sage_const_24 , -_sage_const_39 , -_sage_const_17 , -_sage_const_23 , -_sage_const_45 , -_sage_const_46 , -_sage_const_8 , -_sage_const_16 , -_sage_const_11 , -_sage_const_31 , -_sage_const_4 , -_sage_const_26 , -_sage_const_18 , -_sage_const_40 , -_sage_const_14 , -_sage_const_3 , -_sage_const_22 , -_sage_const_22 , -_sage_const_47 , -_sage_const_8 , -_sage_const_18 , -_sage_const_18 , -_sage_const_15 , -_sage_const_48 , -_sage_const_20 , -_sage_const_28 , -_sage_const_6 , -_sage_const_21 , -_sage_const_6 , -_sage_const_24 , -_sage_const_5 ]
c1_tietze = [_sage_const_93 , _sage_const_84 , _sage_const_92 , _sage_const_90 , _sage_const_63 , _sage_const_63 , _sage_const_76 , _sage_const_60 , _sage_const_61 , _sage_const_57 , _sage_const_99 , _sage_const_62 , _sage_const_55 , _sage_const_91 , _sage_const_95 , _sage_const_62 , _sage_const_59 , _sage_const_54 , _sage_const_91 , _sage_const_69 , _sage_const_55 , _sage_const_60 , _sage_const_96 , _sage_const_74 , _sage_const_78 , _sage_const_55 , _sage_const_78 , _sage_const_64 , _sage_const_61 , _sage_const_54 , _sage_const_76 , _sage_const_84 , _sage_const_50 , _sage_const_25 , _sage_const_40 , _sage_const_98 , _sage_const_35 , _sage_const_87 , _sage_const_54 , _sage_const_16 , _sage_const_65 , _sage_const_60 , _sage_const_95 , _sage_const_20 , _sage_const_4 , _sage_const_79 , _sage_const_69 , _sage_const_15 , _sage_const_53 , _sage_const_26 , _sage_const_92 , _sage_const_87 , _sage_const_48 , _sage_const_56 , _sage_const_99 , _sage_const_83 , _sage_const_2 , _sage_const_56 , _sage_const_47 , _sage_const_59 , _sage_const_42 , _sage_const_3 , _sage_const_19 , _sage_const_53 , -_sage_const_84 , -_sage_const_76 , -_sage_const_54 , -_sage_const_61 , -_sage_const_64 , -_sage_const_78 , -_sage_const_55 , -_sage_const_78 , -_sage_const_74 , -_sage_const_96 , -_sage_const_60 , -_sage_const_55 , -_sage_const_69 , -_sage_const_91 , -_sage_const_54 , -_sage_const_59 , -_sage_const_62 , -_sage_const_95 , -_sage_const_91 , -_sage_const_55 , -_sage_const_62 , -_sage_const_99 , -_sage_const_57 , -_sage_const_61 , -_sage_const_60 , -_sage_const_76 , -_sage_const_63 , -_sage_const_63 , -_sage_const_90 , -_sage_const_92 , -_sage_const_84 , -_sage_const_93 ]
d = _sage_const_2315157014596884429538745310505697576231247890652617038454441871904638642633138761681911931668903937398814215580589949726790160298882443329224130590117763020425392822361299940434853674756207376179949432149288134358028 

# Bước 1: Khởi tạo
n = _sage_const_100 
B = BraidGroup(n)
p = B(p_tietze)
q = B(q_tietze)
c1 = B(c1_tietze)

# Bước 2: Tính k_a = q * p^-1 để khôi phục a
print("[+] Giai đoạn 1: Khôi phục 'a'...")
print("  -> Tính k_a = q * p^-1...")
k_a = q * p.inverse()

# Bước 3: Chiếu k_a xuống nhóm con bên trái để tìm a
print("  -> Chiếu k_a xuống nhóm con bên trái...")
k_a_tietze = k_a.Tietze()
# 'a' được tạo từ gs[:n//2-2] = gs[:48], chỉ số Tietze là 1..48.
a_tietze = [g for g in k_a_tietze if abs(g) <= (n/_sage_const_2  - _sage_const_2 )]
a = B(a_tietze)
print("[+] Đã khôi phục được braid 'a'!")

# Bước 4: Tính c2 theo công thức c2 = a * c1 * a^-1
print("\n[+] Giai đoạn 2: Tính c2 và giải mã...")
print("  -> Tính c2 = a * c1 * a^-1...")
c2 = a * c1 * a.inverse()

# Bước 5: Tính hash của c2 THEO ĐÚNG ĐỊNH NGHĨA
print("  -> Tính hash của dạng chuẩn của c2 (bước này có thể mất một chút thời gian)...")
h_obj = prod(c2.right_normal_form())
h = hashlib.sha512(str(h_obj).encode()).digest()

# Bước 6: Giải mã THEO ĐÚNG QUY TRÌNH
print("  -> Giải mã tin nhắn...")
# 6.1. Chuyển số nguyên d về chuỗi byte (độ dài thay đổi)
d_bytes_encoded = long_to_bytes(d)
# 6.2. Decode chuỗi byte đó bằng UTF-8 để lấy lại chuỗi ký tự
d_str = d_bytes_encoded
# 6.3. XOR giá trị của từng ký tự với hash để lấy lại message gốc
padded_message_bytes = bytes([c ^ h_byte for c, h_byte in zip(d_str, h)])

# Bước 7: In kết quả
print("\n" + "="*_sage_const_50 )
print("  FLAG:")
print("="*_sage_const_50 )
try:
    # Tìm vị trí của dấu '}' để cắt chuỗi, vì flag thường có dạng bi0s{...}
    flag_start_index = padded_message_bytes.find(b'bi0s')
    if flag_start_index != -_sage_const_1 :
        flag_end_index = padded_message_bytes.find(b'}', flag_start_index)
        if flag_end_index != -_sage_const_1 :
            print(padded_message_bytes[flag_start_index : flag_end_index+_sage_const_1 ].decode())
        else:
            print(padded_message_bytes[flag_start_index:].decode())
    else:
        # Nếu không tìm thấy, in toàn bộ để debug
        print(padded_message_bytes.decode())
except Exception as e:
    print(f"Lỗi decode: {e}")
    print(padded_message_bytes)
print("="*_sage_const_50 )

